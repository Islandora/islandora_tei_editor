<?php
/*
 * @file teieditor.module
 *
 * Entry point of the module. All hook functions,
 * are defined within this file, with the exceptions
 * of hooks that are related to the modules install,
 * and hooks that are related to the modules settings.
 */

/* Function: 
 *  RenderModule
 *
 * Params:
 *  p_aForm_State - Contains information about the form.
 *  p_sPid - The pid for the tei page we are to edit.
 *
 * Description:
 *  Displays the module.
 */
function RenderModule($p_sPid=NULL, $p_sAction=NULL) {
  require_once('utils.php'); // Only include if we are to render.
  //if(isValidPid($p_sPid)) {
    switch($p_sAction) // Default render Page
    {
    // Returns a string containing a tei-document
      case 'getTEI': {
          echo drupal_to_js(GetFedoraObjectDatastream($p_sPid, 'TEI'));
          exit;
        }
        break;
      // Save Changes made to the page.
      case 'save': {
          $TEI = $_POST['TEI'];
          // Save to fedora
          module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
          module_load_include('php', 'Fedora_Repository', 'schematron/schematron_validator');
          $object = new Fedora_Item($p_sPid);
          $datastreams = $object->get_datastreams_list_as_array();
          $bResult = FALSE;
          //$nodeToReplace=null;
          if($datastreams['TEI']) {
            $originalTEI = $object->get_datastream_dissemination('TEI');
            $orginalDoc = new DOMDocument();
            //$newDoc = new DomDocument();
            $newTeiElement = $orginalDoc->createDocumentFragment();
            $test=$newTeiElement->appendXML($TEI);
            if(!$test==true) {
              $msg= 'Error appending XML to TEI!'.$TEI;
              echo drupal_to_js(array('msg'=>"$msg \n"));
              exit;
            }
            $orginalDoc->loadxml($originalTEI);
            $divs=$orginalDoc->getElementsByTagName('div');
            foreach ($divs as $div) {
              if($div->getAttribute('type')=='page') {//replace this div with the new one from the teieditor
                $parent = $div->parentNode;
                $parent->removeChild($div);
                $newnode= $orginalDoc->importNode($newTeiElement,true);
                $parent->appendChild($newnode);
                renameElement($newNode,$orginalDoc, 'persname','persName');
                renameElement($newNode,$orginalDoc,'addname','addName');
                renameElement($newNode,$orginalDoc,'orgname','orgName');
                renameElement($newNode,$orginalDoc,'placename','placeName');
                renameElement($newNode,$orginalDoc,'geogname','geogName');
                renameElement($newNode,$orginalDoc,'rolename','roleName');
                break;
              }
            }

            try {
              //would not validate when using $orginalDoc->.... dump into new dom and validates.
              $domForValidation = new DOMDocument("1.0");
              if (! $domForValidation->loadXML($orginalDoc->saveXML())) {
                watchdog(t("FEDORA_REPOSITORY"), t("Error During validation could not create dom.") , NULL, WATCHDOG_ERROR);
                echo drupal_to_js(array('msg'=>"Validation of this document failed. Could not create new dom\n"));
                return;
              }
              $test = $domForValidation->relaxNGValidate(drupal_get_path('module', 'teieditor')."/tei_custom.rng");
            //$test = $orginalDoc->relaxNGValidate(drupal_get_path('module', 'teieditor')."/tei_custom.rng");
            
            }catch(exception $e ) {
              watchdog(t("FEDORA_REPOSITORY"), t("Your changes were not saved.") . $e, NULL, WATCHDOG_ERROR);

              echo drupal_to_js(array('msg'=>"Validation of this document failed. \n".$e->getMessage()));
              return;
            }
            if(!$test) {
              watchdog(t("FEDORA_REPOSITORY"), t("Your changes were not saved.  Document was not valid TEI"), NULL, WATCHDOG_ERROR);
              //echo $orginalDoc->saveXML();exit(0);
              echo drupal_to_js(array('msg'=>"Failed to validate TEI document."));
              return;
            }

            try {
            // Gather Information about datastream, so we don't overwrite it
            // with nil.
              $dataStream = $object->soap_call('getDatastream',
                  array("pid" => $p_sPid,
                  "dsID" => 'TEI',
                  "asOfDateTime" => NULL
                  )
              );
              $dataStream = $dataStream->datastream; // Cleaner Looking
              // Overwrite the datastream but maintain metadata.
              $bResult = $object->soap_call('modifyDatastreamByValue',
                  array("pid" => $p_sPid,
                  "dsID" => 'TEI',
                  "altIDs" => new SoapVar($dataStream->altIDs->item, SOAP_ENC_ARRAY, 'ArrayOfString'),
                  "dsLabel" => $dataStream->label,
                  "MIMEType" => $dataStream->MIMEType,
                  "formatURI" => $dataStream->formatURI,
                  // "dsContent" => $TEI,
                  "dsContent" => $orginalDoc->saveXML(),
                  "checksumType" => $dataStream->checksumType,
                  "checksum" => $dataStream->checksum,
                  "logMessage" => "Overwrote Content of Datastream.",
                  "force" => FALSE,
                  )
              );
            }
            catch(exception $e) {
            // Report Problem.
              watchdog(t("FEDORA_REPOSITORY"), t("Your changes were not saved.") . $e, NULL, WATCHDOG_ERROR);
              echo drupal_to_js(array('msg'=>"Your changes were not saved. \n".$e->getMessage()));
              return;
            }

            echo drupal_to_js(array('msg'=>"Save successful."));
            exit;
          }
        }
        break;
      // Render the page
      default: {
          drupal_add_js(drupal_get_path('module', 'teieditor').'/jquery/js/jquery-1.3.2.min.js');
          drupal_add_css(drupal_get_path('module', 'teieditor').'/jquery/css/smoothness/jquery-ui-1.7.2.custom.css');
          drupal_add_js(drupal_get_path('module', 'teieditor').'/jquery/js/jquery-ui-1.7.2.custom.min.js');
          drupal_add_css(drupal_get_path('module', 'teieditor').'/tei.css');
          drupal_add_js(drupal_get_path('module', 'teieditor').'/tei.js');
          drupal_add_css(drupal_get_path('module', 'teieditor').'/teieditor.css');
          drupal_add_js(drupal_get_path('module', 'teieditor').'/teieditor.js');


          // Either we have a valid page pid or we take the first page pid of our valid book pid.
          $options = getPidList($p_sPid);
          if(empty($options))
          {
             $startPid=$p_sPid;
	   }
          else
          {
            $startPid=$options[1]['pid'];
          }
          //$startPid =  (isValidPagePid($p_sPid))? $p_sPid : $options[1]['pid'];
          $selections = "";
          for($i = 1; $i <= sizeof($options); ++$i) {
            $pid = $options[$i]['pid'];
            $title = $options[$i]['title'];
            $selected = ($pid==$startPid) ? ' selected="selected"' : '' ;
            $selections = $selections . '<option value="'.$pid.'"'.$selected.'>'.$title.'</option>';
          }
          $fedora_url = variable_get('fedora_base_url', 'http://localhost:8080/fedora');
          $fedora_url = substr($fedora_url,0,-7);
          $editor = t('<div id="teieditor-module" class="ui-corner-all">
		 		<div id="toolbar">
					<button id="buttonPrevious" title="Previous Page" class="ui-state-default ui-corner-all"><span class="ui-icon ui-icon-arrowthick-1-w"/></button>
					<button id="buttonNext" title="Next Page" class="ui-state-default ui-corner-all"><span class="ui-icon ui-icon-arrowthick-1-e"/></button>
					<select id="pageSelection" title="Select a Page" class="ui-state-default ui-corner-all">'.$selections.'</select>
				</div>
				<div id="viewer">
					<div id="map">
					<iframe name="map" frameborder="0" width="100%" height="100%" src="'.$fedora_url.'/teieditor/teieditor_iframe.html?&pagePid='.$pid.'">Sorry Your browser does not support iframes.</iframe>
					</div>
					<div id="tei-editor"></div>
                        	</div>
		 	</div>');
          return $editor;
        }
    }
  //}
  //else // Print error screen.
  //{
  //  return t('Sorry the pid specified is not valid.');
  //}
}
//jquery makes all elements lowercase hack to fix this.
function renameElement($element,$doc,$oldName,$newName) {
//$existingElements = $doc->getElementsByTagName($oldName);
  $xpath = new DOMXpath($doc);
  $existingElements = $xpath->query("//$oldName");
  foreach($existingElements as $existingElement) {
    $parent = $existingElement->parentNode;
    //$parent->removeChild($existingElement);
    $newElement=$doc->createElement($newName);
    //   $newElement->nodeValue=$existingElement->nodeValue;
    foreach($existingElement->attributes as $value) {
      $newElement->setAttribute($value->nodeName,$value->value);
    }
    if($existingElement->childNodes) {
      foreach($existingElement->childNodes as $child) {
        if($child->nodeName=="#text")
          $newElement->appendChild($doc->createTextNode($child->nodeValue));
        else {
        //$newElement->appendChild(renameElement($child,$doc,$oldName,$newName));
          $newElement->appendChild($child->cloneNode(true));
        }
      }
    }
    $doc->importNode($newElement);
    $parent->replaceChild($newElement,$existingElement);

  }
}

/* Function: 
 *  teieditor_menu
 *
 * Params: <none>
 *
 * Returns:
 *  An array that defines all the menu items associated with this module.
 *  Currently defines the settings menu, and a menu where the module can be accessed.
 */
function teieditor_menu() {
  /*
  // Settings
  $items['admin/settings/teieditor'] = array(
					   'title' => 'TEI Editor settings',
					   'description' => 'Settings for the TEI Editor Module.',	
				   'page callback' => 'drupal_get_form',
					   'page arguments' => array('teieditor_admin_settings'),
					   'access arguments' => array('administer site configuration'),
					   'type' => MENU_NORMAL_ITEM,
					   'file' => 'teieditor.admin.inc',
					   );*/
// Module
  $items['teieditor'] = array(
      'title' => 'TEI Editor',
      'description' => 'TEI Editor',
      'page callback' => 'RenderModule',
      //'page arguments' => array('RenderModule',1),
      'access arguments' => array('access teieditor'),
      'type' => MENU_CALLBACK
  );
  return $items;
}

/* Function: 
 *  teieditor_theme
 *
 * Params: <none>
 *
 * Returns:
 *

function teieditor_theme() 
{ 
   return array('RenderModule'=> array('arguments'=>array()));
}

/* Function: 
 *  theme_teieditor_form
 *
 * Params: <none>
 *
 * Returns:
 *
/
function theme_RenderModule($form) 
{ 
  $output = drupal_render($form);
  return $output;
}


/* Function: 
 *  teieditor_perm
 *
 * Params: <none>
 *
 * Returns:
 *  An array that defines all the permissions that relate to this module.
 */
function teieditor_perm() {
  return array('access teieditor');
}

/* Function: 
 *  teieditor_mail
 *
 * Params: 
 *  p_sKey - ?
 *  p_aMessage - Referenced parameter, set to email message.
 *  p_aParams - User defined variables, data to be used in the message.
 *
 * Description:
 *  Notifies the admin that someone has edited an object within fedora.
 *
function teieditor_mail($p_sKey, &$p_aMessage, $p_aParams)
{
  $p_aMessage['subject'] = t('Notification: Datastream '.$p_aParams['datastream'].' in object '.$p_aParams['object'].' has been modified.');
  $p_aMessage['body'] = t('Datastream '.$p_aParams['datastream'].' in object '.$p_aParams['object'].' has been modified by user '.$p_aParams['user'].".\n-------See new datastream below -------\n".$p_aParams['modifiedTEI']);
  }*/
